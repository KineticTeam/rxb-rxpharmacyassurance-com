(()=>{function t(t){return function(t){if(Array.isArray(t))return e(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function n(e){return t(lottie.getRegisteredAnimations()).filter((function(t){return t.wrapper==e}))[0]}function r(t){t.classList.contains("ep-lottie-loaded")||bodymovin.loadAnimation({wrapper:t,animType:t.dataset.animtype,loop:"true"==t.dataset.loop,autoplay:"false"!=t.dataset.autoplay,prerender:!0,path:t.dataset.json}).addEventListener("DOMLoaded",(function(){t.classList.add("ep-lottie-loaded")}))}!function(){var e=document.querySelectorAll(".ep-lottie-animation .ep-lottie-animation-inner");if(window.IntersectionObserver){var o=new IntersectionObserver((function(t,e){t.forEach((function(t,e){!function(t){var e=t.target;t.isIntersecting?(r(e),n(e).play()):e.classList.contains("ep-lottie-loaded")&&n(e).pause()}(t)}))}),{root:null,threshold:0});t(e).forEach((function(t){o.observe(t)}))}else window.requestAnimationFrame((function(){t(e).forEach((function(t){return r(t)}))}))}()})();